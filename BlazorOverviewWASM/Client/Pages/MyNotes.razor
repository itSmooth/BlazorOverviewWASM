@using BlazorOverviewWASM.Shared.Models
@*加入要使用BlazorOverview.Services 命名空間的API*@
@using BlazorOverviewWASM.Shared.Services
@*當這個Blazor 元件建立之後，要注入這個IMyNoteService 抽象型別的具體實作物件*@
@inject IMyNoteService MyNoteService

<h3> 我的記事</h3>
@* 這裡是HTML 的標記宣告*@
<table class="table">
    <thead>
        <tr>
            <th> 事項</th>
            <th> 修改</th>
            <th> 刪除</th>
        </tr>
    </thead>
    <tbody>
        @* 列出集合清單中的每一筆紀錄到HTML Table 內*@
        @foreach (var NoteItem in Notes)
        {
            <tr>
                @* 透過資料綁定，把集合清單內的紀錄屬性，顯示在網頁上*@
                <td>@NoteItem.Title</td>
                @* 這個按鈕尚未進行任何設計*@
                <td>
                    @* 透過Blazor 的資料綁定，將修改按鈕的點選事件，綁定到C# 的委派處理方法*@
                    @* 當該修改按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去*@
                    <input type="button" class="btn btn-primary" value=" 修改"
                           @onclick="() => Update(NoteItem)" />
                </td>
                <td>
                    @* 透過Blazor 的資料綁定，將刪除按鈕的點選事件，綁定到C# 的委派處理方法*@
                    <input type="button" class="btn btn-danger" value=" 刪除"
                           @onclick="() => Delete(NoteItem)" />
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    @* 透過Blazor 的資料綁定，將新增按鈕的點選事件，*@
    @* 綁定到C# 的委派處理方法*@
    <input type="button" class="btn btn-primary" @onclick="Add" value=" 新增" />
</div>

@* 由C# 的變數ShowPopup 來控制，這裡的HTML 標記是否要顯示出來，這裡完全不需要使用到JavaScript *@
@if (ShowPopup)
{
    //這裡是BootStrap 的標準對話窗標記宣告
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> 記事項目</h5>
                    @* 這裡將會宣告一個按鈕，點選這個按鈕，將會關閉此對話窗*@
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-9">
                            <div class="row p-2">
                                @* 使用Blazor 提供的EditForm 元件來進行表單資料輸入與驗證*@
                                @* 其中EditForm 提供有效資料驗證OnValidSubmit 的事件*@
                                <EditForm Model="@CurrentMyNote" OnValidSubmit="@HandleValidSubmit">
                                    @*DataAnnotationsValidator 元件會使用資料模型的屬性宣告，將驗證支援附加至EditContext*@
                                    <DataAnnotationsValidator />
                                    @*ValidationSummary 元件會匯總所有驗證訊息*@
                                    <ValidationSummary />
                                    <div class="form-group">
                                        <label for="taskName"> 事項名稱</label>
                                        @* 這裡提供使用者輸入該事項的名稱，並會儲存到Title 屬性內*@
                                        <InputText id="name" class="form-control" @bind-Value="@CurrentMyNote.Title" />
                                    </div>
                                    @* 宣告儲存按鈕，點選後，若資料沒有錯誤，將會觸發OnValidSubmit 所綁定的事件委派方法*@
                                    <button type="submit" class="btn btn-primary">儲存</button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // 儲存要顯示的集合清單內的所有紀錄
    public List<MyNote> Notes { get; set; } = new List<MyNote>();
    // 正在編輯或者新增的紀錄物件
    public MyNote CurrentMyNote { get; set; } = new MyNote();
    // 記錄下修改前的紀錄物件
    public MyNote OrigMyNote { get; set; } = new MyNote();
    // 是否要顯示新增或修改對話窗
    public bool ShowPopup { get; set; } = false;
    // 這次處理的紀錄是否為新增，若該屬性為false，則表示這次要修改紀錄
    public bool IsNewMode { get; set; }
    // 元件建立的時候，所要執行的初始化工作，這裡使用非同步方式來呼叫
    protected override async Task OnInitializedAsync()
    {
        // 透過IMyNoteService.RetriveAsync() 方法，來取得所有記事清單
        Notes = await MyNoteService.RetriveAsync();
    }
    // 新增按鈕的點選事件之處理委派方法
    private void Add()
    {
        // 設定此次要進行新增一筆紀錄
        IsNewMode = true;
        //產生要新增的紀錄物件
        CurrentMyNote = new MyNote();
        // 顯示新增紀錄使用的對話窗
        ShowPopup = true;
    }
    // 修改按鈕的點選事件之處理委派方法
    private void Update(MyNote note)
    {
        // 設定此次要進行修改紀錄
        IsNewMode = false;
        CurrentMyNote = OrigMyNote = note.Clone();
        //產生一個物件副本，做為要修改的紀錄物件
        CurrentMyNote = note.Clone();
        //保存此次要修改的紀錄物件
        OrigMyNote = note;
        // 顯示新增紀錄使用的對話窗
        ShowPopup = true;
    }
    // 當使用者連完資料資料且點選儲存按鈕之後，若沒有錯誤產生，就會觸發此委派方法
    private async void HandleValidSubmit()
    {
        // 設定要關閉對話窗的變數，讓對話窗的HTML 標記不會顯示在瀏覽器畫面上
        ShowPopup = false;
        //判斷此次動作是要新增還是要修改紀錄
        if (IsNewMode == true)
        {
            // 透過IMyNoteService.CreateAsync() 方法，加入一筆紀錄到集合清單內
            await MyNoteService.CreateAsync(CurrentMyNote);
        }
        else
        {
            // 透過IMyNoteService.UpdateAsync() 方法，修改該紀錄
            await MyNoteService.UpdateAsync(OrigMyNote, CurrentMyNote);
        }
        // 透過IMyNoteService.RetriveAsync() 方法，來取得所有記事清單
        Notes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }
    // 關閉對話窗的方法
    private void CloseDialog()
    {
        // 設定要關閉對話窗的變數，讓對話窗的HTML 標記不會顯示在瀏覽器畫面上
        ShowPopup = false;    // 刪除按鈕的點選事件之處理委派方法
    }
    // 刪除按鈕的點選事件之處理委派方法
    private async void Delete(MyNote note)
    {
        // 透過IMyNoteService.DeleteAsync() 方法，從集合清單中刪除所選擇的紀錄
        await MyNoteService.DeleteAsync(note);
        Notes = await MyNoteService.RetriveAsync();  // 第八章小bug在這，已修正
        this.StateHasChanged();                      // 正常應該會重新Render，但這不知為何不會，下此方法強制重新 Render
    }
}